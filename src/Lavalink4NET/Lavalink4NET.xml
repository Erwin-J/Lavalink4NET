<!-- 
 This is the default license template.
 
 File: Lavalink4NET.xml
 Author: angel
 Copyright (c) 2019 angel
 
 To edit this license information: Press Ctrl+Shift+P and press 'Create new License Template...'.
 -->

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lavalink4NET</name>
    </assembly>
    <members>
        <member name="T:Lavalink4NET.Cluster.ClusterNodeInfo">
            <summary>
                Stores information about a cluster node.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Cluster.ClusterNodeInfo.#ctor(Lavalink4NET.LavalinkNode)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Cluster.ClusterNodeInfo"/> class.
            </summary>
            <param name="node">the node</param>
        </member>
        <member name="P:Lavalink4NET.Cluster.ClusterNodeInfo.Node">
            <summary>
                Gets the target node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.ClusterNodeInfo.Statistics">
            <summary>
                Gets the node statistics (may be <see langword="null"/>).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.ClusterNodeInfo.LastUsage">
            <summary>
                Gets the coordinated universal time (UTC) point of the last usage of the node.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Cluster.LavalinkCluster">
            <summary>
                A set of lavalink nodes bound to a cluster usable for voice node balancing.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.#ctor(Lavalink4NET.Cluster.LavalinkClusterOptions,Lavalink4NET.IDiscordClientWrapper,Microsoft.Extensions.Logging.ILogger{Lavalink4NET.Lavalink})">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Cluster.LavalinkCluster"/> class.
            </summary>
            <param name="options">the cluster options</param>
            <param name="client">the discord client</param>
            <param name="logger">the logger</param>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.InitializeAsync">
            <summary>
                Initializes the audio service asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.AddNodeAsync(Lavalink4NET.LavalinkNodeOptions)">
            <summary>
                Dynamically adds a node to the cluster.
            </summary>
            <param name="nodeOptions">the node connection options</param>
            <returns>the cluster node info created for the node</returns>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkCluster.PreferredNode">
            <summary>
                Gets the preferred node using the <see cref="T:Lavalink4NET.Cluster.LoadBalacingStrategy"/> specified in the options.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.Dispose">
            <summary>
                Disposes all underlying nodes.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetPlayer``1(System.UInt64)">
            <summary>
                Gets the audio player for the specified <paramref name="guildId"/>.
            </summary>
            <typeparam name="TPlayer">the type of the player to use</typeparam>
            <param name="guildId">the guild identifier to get the player for</param>
            <returns>the player for the guild</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetServingNode(System.UInt64)">
            <summary>
                Gets the node that serves the guild specified by <paramref name="guildId"/> (if no
                node serves the guild, <see cref="P:Lavalink4NET.Cluster.LavalinkCluster.PreferredNode"/> is used).
            </summary>
            <param name="guildId">the guild snowflake identifier</param>
            <returns></returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetTrackAsync(System.String,Lavalink4NET.Rest.SearchMode)">
            <summary>
                Gets the track for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <returns>the track found for the query</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.GetTracksAsync(System.String,Lavalink4NET.Rest.SearchMode)">
            <summary>
                Gets the tracks for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <returns>the tracks found for the query</returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.HasPlayer(System.UInt64)">
            <summary>
                Gets a value indicating whether a player is created for the specified <paramref name="guildId"/>.
            </summary>
            <param name="guildId">
                the snowflake identifier of the guild to create the player for
            </param>
            <returns>a value indicating whether a player is created for the specified <paramref name="guildId"/></returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.JoinAsync``1(System.UInt64,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the audio player</para>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkCluster.LoadTracksAsync(System.String,Lavalink4NET.Rest.SearchMode)">
            <summary>
                Loads the tracks specified by the <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the search query</param>
            <param name="mode">the track search mode</param>
            <returns>
                a task that represents the asynchronous operation <param>the request response</param>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkClusterNode.#ctor(Lavalink4NET.Cluster.LavalinkCluster,Lavalink4NET.LavalinkNodeOptions,Lavalink4NET.IDiscordClientWrapper,Microsoft.Extensions.Logging.ILogger{Lavalink4NET.Lavalink})">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.LavalinkNode"/> class.
            </summary>
            <param name="cluster">the cluster</param>
            <param name="options">the node options for connecting</param>
            <param name="client">the discord client</param>
            <param name="logger">the logger</param>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkClusterNode.Cluster">
            <summary>
                Gets the cluster owning the node.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Cluster.LavalinkClusterNode.OnStatisticsUpdateAsync(Lavalink4NET.Events.StatisticUpdateEventArgs)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkNode.StatisticsUpdated"/> event asynchronously.
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Cluster.LavalinkClusterOptions">
            <summary>
                The options for a lavalink cluster ( <see cref="T:Lavalink4NET.Cluster.LavalinkCluster"/>).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkClusterOptions.LoadBalacingStrategy">
            <summary>
                Gets or sets the load balancing strategy to use.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LavalinkClusterOptions.Nodes">
            <summary>
                Gets or sets the cluster node options.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Cluster.LoadBalacingStrategies">
            <summary>
                Provides a set of load balancing strategies.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LoadBalacingStrategies.RoundRobinStrategy">
            <summary>
                The round robin load balancing strategy favors the node that has not been used the longest.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Cluster.LoadBalacingStrategies.LeastPlayersStrategy">
            <summary>
                The load-balancing strategy for the fewest players uses the node that has the
                least-playing player.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Cluster.LoadBalacingStrategy">
            <summary>
                Gets a suitable node using the load balancing strategy.
            </summary>
            <param name="cluster">the cluster</param>
            <param name="nodes">the nodes</param>
            <returns>the preferred node</returns>
        </member>
        <member name="T:Lavalink4NET.Decoding.DataInputReader">
            <summary>
                A C# port for the DataInput stream (used to decode Lavalink tracks).
            </summary>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.#ctor(System.IO.Stream,Lavalink4NET.Decoding.Endianness,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Decoding.DataInputReader"/> class.
            </summary>
            <param name="baseStream">the base stream to read from</param>
            <param name="endianness">the input stream endianness</param>
            <param name="leaveOpen">
                a value indicating whether the stream should be left open when disposing
            </param>
        </member>
        <member name="P:Lavalink4NET.Decoding.DataInputReader.BaseStream">
            <summary>
                Gets the base stream to read from.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Decoding.DataInputReader.Endianness">
            <summary>
                Gets the source stream endianness.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadBytes(System.Int32)">
            <summary>
                Reads bytes from the stream.
            </summary>
            <param name="count">the number of bytes to read</param>
            <returns>the read bytes</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of the <see cref="P:Lavalink4NET.Decoding.DataInputReader.BaseStream"/> was reached.
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadInt16">
            <summary>
                Reads a <see cref="T:System.Int16"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadInt32">
            <summary>
                Reads a <see cref="T:System.Int32"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadInt64">
            <summary>
                Reads a <see cref="T:System.Int64"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadSingle">
            <summary>
                Reads a <see cref="T:System.Single"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadUInt16">
            <summary>
                Reads an <see cref="T:System.UInt16"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadUInt32">
            <summary>
                Reads an <see cref="T:System.UInt32"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadUInt64">
            <summary>
                Reads an <see cref="T:System.UInt64"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadBoolean">
            <summary>
                Reads a <see cref="T:System.Boolean"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadByte">
            <summary>
                Reads a <see cref="T:System.Byte"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadSByte">
            <summary>
                Reads a <see cref="T:System.SByte"/> from the stream.
            </summary>
            <returns>the read value</returns>
            <exception cref="T:System.IO.EndOfStreamException">
                thrown if the end of stream was reached while reading the value
            </exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.ReadString">
            <summary>
                Reads an UTF-8 string from the stream.
            </summary>
            <returns>the read string</returns>
        </member>
        <member name="M:Lavalink4NET.Decoding.DataInputReader.Dispose">
            <summary>
                Disposes the underlying <see cref="P:Lavalink4NET.Decoding.DataInputReader.BaseStream"/>, if specified in constructor (!leaveOpen).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Decoding.EndianConverter">
            <summary>
                A utility class for conversion around endianness.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Decoding.EndianConverter.SystemEndianess">
            <summary>
                Gets the system endianness.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Decoding.EndianConverter.Convert(System.Byte[],Lavalink4NET.Decoding.Endianness,Lavalink4NET.Decoding.Endianness)">
            <summary>
                Converts the <paramref name="data"/> endianness.
            </summary>
            <param name="data">the data to convert</param>
            <param name="source">the source endianness</param>
            <param name="target">the target endianness</param>
        </member>
        <member name="T:Lavalink4NET.Decoding.Endianness">
            <summary>
                The different endian types (without MiddleEndian).
            </summary>
        </member>
        <member name="F:Lavalink4NET.Decoding.Endianness.BigEndian">
            <summary>
                The big-endian byte order.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Decoding.Endianness.LittleEndian">
            <summary>
                The little-endian byte order.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Decoding.TrackDecoder">
            <summary>
                An utility class for decoding lavalink tracks.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Decoding.TrackDecoder.DecodeTrack(System.String,System.Boolean)">
            <summary>
                Decodes a lavalink track identifier.
            </summary>
            <param name="identifier">the track identifier (encoded in base64)</param>
            <param name="verify">a value indicating whether the track header should be verified</param>
            <returns>the decoded track info</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the track header is invalid</exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.TrackDecoder.ReadHeader(Lavalink4NET.Decoding.DataInputReader,System.Int32,System.Boolean)">
            <summary>
                Reads the track header.
            </summary>
            <param name="reader">the reader to read from</param>
            <param name="length">the length of raw binary data</param>
            <param name="verify">a value indicating whether the track header should be verified</param>
            <exception cref="T:System.InvalidOperationException">thrown if the track header is invalid</exception>
        </member>
        <member name="M:Lavalink4NET.Decoding.TrackDecoder.DecodeTrack(System.Byte[],System.Boolean)">
            <summary>
                Decodes a lavalink track identifier.
            </summary>
            <param name="buffer">the raw track identifier</param>
            <param name="verify">a value indicating whether the track header should be verified</param>
            <returns>the decoded track info</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the track header is invalid</exception>
        </member>
        <member name="T:Lavalink4NET.Events.AsyncEventExtensions">
            <summary>
                Extension method for asynchronous events.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.AsyncEventExtensions.InvokeAsync(Lavalink4NET.Events.AsyncEventHandler,System.Object,System.EventArgs)">
            <summary>
                Invokes an asynchronous event.
            </summary>
            <param name="eventHandler">the asynchronous event handler</param>
            <param name="sender">the object that is firing the event</param>
            <param name="eventArgs">
                the event parameters (if <see langword="null"/><see cref="F:System.EventArgs.Empty"/> is used)
            </param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Events.AsyncEventExtensions.InvokeAsync``1(Lavalink4NET.Events.AsyncEventHandler{``0},System.Object,``0)">
            <summary>
                Invokes an asynchronous event.
            </summary>
            <typeparam name="TEventArgs">the type of the event parameters</typeparam>
            <param name="eventHandler">the asynchronous event handler</param>
            <param name="sender">the object that is firing the event</param>
            <param name="eventArgs">the event parameters</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Events.AsyncEventExtensions.WaitOneAsync``1(Lavalink4NET.Events.AsyncEventHandler{``0},System.Predicate{``0})">
            <summary>
                Waits until an asynchronous event is triggered.
            </summary>
            <typeparam name="TEventArgs">the type of event parameters</typeparam>
            <param name="eventHandler">the asynchronous event handler</param>
            <param name="predicate">the predicate to check the event parameters</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Events.AsyncEventExtensions.WaitOneAsync(Lavalink4NET.Events.AsyncEventHandler,System.Predicate{System.EventArgs})">
            <summary>
                Waits until an asynchronous event is triggered and returns its result.
            </summary>
            <param name="eventHandler">the asynchronous event handler</param>
            <param name="predicate">the predicate to check the event parameters</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Events.AsyncEventHandler`1">
            <summary>
                An asynchronous event handler.
            </summary>
            <typeparam name="TEventArgs">the type of the event arguments</typeparam>
            <param name="sender">the object that fired the event</param>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Events.AsyncEventHandler">
            <summary>
                An asynchronous event handler.
            </summary>
            <param name="sender">the object that fired the event</param>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Events.PayloadReceivedEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkSocket.PayloadReceived"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.PayloadReceivedEventArgs.#ctor(Lavalink4NET.Payloads.IPayload)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.PayloadReceivedEventArgs"/> class.
            </summary>
            <param name="payload">the payload that was received</param>
        </member>
        <member name="P:Lavalink4NET.Events.PayloadReceivedEventArgs.Payload">
            <summary>
                Gets the payload that was received.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.StatisticUpdateEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.StatisticsUpdated"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.StatisticUpdateEventArgs.#ctor(System.Int32,System.Int32,System.TimeSpan,Lavalink4NET.Statistics.MemoryStatistics,Lavalink4NET.Statistics.ProcessorStatistics,Lavalink4NET.Statistics.FrameStatistics)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.StatisticUpdateEventArgs"/> class.
            </summary>
            <param name="players">the number of players the node is holding</param>
            <param name="playingPlayers">
                the number of players that are currently playing using the node
            </param>
            <param name="uptime">the uptime from the node (how long the node is online)</param>
            <param name="memory">the usage statistics for the memory of the node</param>
            <param name="processor">the usage statistics for the processor of the node</param>
            <param name="frameStatistics">the frame statistics of the node</param>
        </member>
        <member name="P:Lavalink4NET.Events.StatisticUpdateEventArgs.Players">
            <summary>
                Gets the number of players the node is holding.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.StatisticUpdateEventArgs.PlayingPlayers">
            <summary>
                Gets the number of players that are currently playing using the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.StatisticUpdateEventArgs.Uptime">
            <summary>
                Gets the uptime from the node (how long the node is online).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.StatisticUpdateEventArgs.Memory">
            <summary>
                Gets the usage statistics for the memory of the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.StatisticUpdateEventArgs.Processor">
            <summary>
                Gets the usage statistics for the processor of the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.StatisticUpdateEventArgs.FrameStatistics">
            <summary>
                Gets the frame statistics of the node.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.TrackEndEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.TrackEnd"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.TrackEndEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer,System.String,Lavalink4NET.Player.TrackEndReason)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.TrackEndEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <param name="trackIdentifier">the identifier of the affected track</param>
            <param name="reason">the reason why the track ended</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.TrackEndEventArgs.Reason">
            <summary>
                Gets the reason why the track ended.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.TrackEndEventArgs.MayStartNext">
            <summary>
                Gets a value indicating whether the player should play the next track.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.TrackEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.TrackEnd"/>.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.TrackEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.TrackEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <param name="trackIdentifier">the identifier of the affected track</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.TrackEventArgs.TrackIdentifier">
            <summary>
                Gets the identifier of the affected track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.TrackEventArgs.Player">
            <summary>
                Gets the affected player.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.TrackExceptionEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.TrackException"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.TrackExceptionEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.TrackExceptionEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <param name="trackIdentifier">the identifier of the affected track</param>
            <param name="error">the error that occurred</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="error"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.TrackExceptionEventArgs.Error">
            <summary>
                Gets the error that occurred.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.TrackStuckEventArgs">
            <summary>
                The event arguments for the <see cref="E:Lavalink4NET.LavalinkNode.TrackStuck"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.TrackStuckEventArgs.#ctor(Lavalink4NET.Player.LavalinkPlayer,System.String,System.Int64)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.TrackStuckEventArgs"/> class.
            </summary>
            <param name="player">the affected player</param>
            <param name="trackIdentifier">the identifier of the affected track</param>
            <param name="threshold">the threshold in milliseconds</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="player"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Events.TrackStuckEventArgs.Threshold">
            <summary>
                Gets the threshold in milliseconds.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Events.VoiceStateUpdateEventArgs">
            <summary>
                Represents the event arguments for the
                <see cref="E:Lavalink4NET.IDiscordClientWrapper.VoiceStateUpdated"/> event.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Events.VoiceStateUpdateEventArgs.#ctor(System.UInt64,Lavalink4NET.VoiceState,Lavalink4NET.VoiceState)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Events.VoiceStateUpdateEventArgs"/> class.
            </summary>
            <param name="userId">the user snowflake identifier the update is for</param>
            <param name="voiceState">the new user voice state</param>
            <param name="oldVoiceState">the old user voice state</param>
        </member>
        <member name="P:Lavalink4NET.Events.VoiceStateUpdateEventArgs.UserId">
            <summary>
                Gets the user snowflake identifier the update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.VoiceStateUpdateEventArgs.VoiceState">
            <summary>
                Gets the new user voice state.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Events.VoiceStateUpdateEventArgs.OldVoiceState">
            <summary>
                Gets the old user voice state.
            </summary>
        </member>
        <member name="T:Lavalink4NET.IAudioService">
            <summary>
                The interface for a lavalink audio provider service.
            </summary>
        </member>
        <member name="M:Lavalink4NET.IAudioService.InitializeAsync">
            <summary>
                Initializes the audio service asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.IAudioService.GetPlayer``1(System.UInt64)">
            <summary>
                Gets the audio player for the specified <paramref name="guildId"/>.
            </summary>
            <typeparam name="TPlayer">the type of the player to use</typeparam>
            <param name="guildId">the guild identifier to get the player for</param>
            <returns>the player for the guild</returns>
        </member>
        <member name="M:Lavalink4NET.IAudioService.HasPlayer(System.UInt64)">
            <summary>
                Gets a value indicating whether a player is created for the specified <paramref name="guildId"/>.
            </summary>
            <param name="guildId">
                the snowflake identifier of the guild to create the player for
            </param>
            <returns>a value indicating whether a player is created for the specified <paramref name="guildId"/></returns>
        </member>
        <member name="M:Lavalink4NET.IAudioService.JoinAsync``1(System.UInt64,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <typeparam name="TPlayer">the type of the player to create</typeparam>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the audio player</para>
            </returns>
        </member>
        <member name="T:Lavalink4NET.IDiscordClientWrapper">
            <summary>
                The interface for implementing a discord client wrapper for usage with the lavalink audio service.
            </summary>
        </member>
        <member name="M:Lavalink4NET.IDiscordClientWrapper.InitializeAsync">
            <summary>
                Awaits the initialization of the discord client asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="P:Lavalink4NET.IDiscordClientWrapper.CurrentUserId">
            <summary>
                Gets the current user snowflake identifier value.
            </summary>
        </member>
        <member name="P:Lavalink4NET.IDiscordClientWrapper.ShardCount">
            <summary>
                Gets the number of total shards the bot uses.
            </summary>
        </member>
        <member name="M:Lavalink4NET.IDiscordClientWrapper.SendVoiceUpdateAsync(System.UInt64,System.Nullable{System.UInt64},System.Boolean,System.Boolean)">
            <summary>
                Sends a voice channel state update asynchronously.
            </summary>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">
                the snowflake identifier of the voice channel to join (if <see langword="null"/> the
                client should disconnect from the voice channel).
            </param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.IDiscordClientWrapper.GetChannelUsersAsync(System.UInt64,System.UInt64)">
            <summary>
                Gets the snowflake identifier values of the users in the voice channel specified by
                <paramref name="voiceChannelId"/> (the snowflake identifier of the voice channel).
            </summary>
            <param name="guildId">the guild identifier snowflake where the channel is in</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the snowflake identifier values of the users in the voice channel</para>
            </returns>
        </member>
        <member name="E:Lavalink4NET.IDiscordClientWrapper.VoiceStateUpdated">
            <summary>
                An asynchronous event which is triggered when a user voice state was updated.
            </summary>
        </member>
        <member name="E:Lavalink4NET.IDiscordClientWrapper.VoiceServerUpdated">
            <summary>
                An asynchronous event which is triggered when the voice server was updated.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Lavalink">
            <summary>
                The main lavalink class.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Lavalink.SupportedVersion">
            <summary>
                Gets the current lavalink server version that is supported by the library.
            </summary>
        </member>
        <member name="T:Lavalink4NET.LavalinkNode">
            <summary>
                Used for connecting to a single lavalink node.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.#ctor(Lavalink4NET.LavalinkNodeOptions,Lavalink4NET.IDiscordClientWrapper,Microsoft.Extensions.Logging.ILogger{Lavalink4NET.Lavalink})">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.LavalinkNode"/> class.
            </summary>
            <param name="options">the node options for connecting</param>
            <param name="client">the discord client</param>
            <param name="logger">the logger</param>
        </member>
        <member name="E:Lavalink4NET.LavalinkNode.StatisticsUpdated">
            <summary>
                An asynchronous event which is triggered when a new statistics update was received
                from the lavalink node.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkNode.TrackEnd">
            <summary>
                An asynchronous event which is triggered when a track ended.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkNode.TrackException">
            <summary>
                An asynchronous event which is triggered when an exception occurred while playing a track.
            </summary>
        </member>
        <member name="E:Lavalink4NET.LavalinkNode.TrackStuck">
            <summary>
                An asynchronous event which is triggered when a track got stuck.
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkNode.Players">
            <summary>
                Gets the player dictionary.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.Dispose">
            <summary>
                Unregisters all events from the discord client and disposes the inner RESTful HTTP client.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.GetPlayer``1(System.UInt64)">
            <summary>
                Gets the audio player for the specified <paramref name="guildId"/>.
            </summary>
            <typeparam name="TPlayer">the type of the player to use</typeparam>
            <param name="guildId">the guild identifier to get the player for</param>
            <returns>the player for the guild</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown when a player was already created for the guild specified by
                <paramref name="guildId"/>, but the requested player type (
                <typeparamref name="TPlayer"/>) differs from the created one.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the node socket has not been initialized. (Call
                <see cref="M:Lavalink4NET.LavalinkSocket.InitializeAsync"/> before sending payloads)
            </exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.HasPlayer(System.UInt64)">
            <summary>
                Gets a value indicating whether a player is created for the specified <paramref name="guildId"/>.
            </summary>
            <param name="guildId">
                the snowflake identifier of the guild to create the player for
            </param>
            <returns>a value indicating whether a player is created for the specified <paramref name="guildId"/></returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.JoinAsync``1(System.UInt64,System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <remarks>This will auto-initialize the connection to the node asynchronously.</remarks>
            <param name="guildId">the guild snowflake identifier</param>
            <param name="voiceChannelId">the snowflake identifier of the voice channel to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the audio player</para>
            </returns>
            <exception cref="T:System.InvalidOperationException">
                thrown when a player was already created for the guild specified by
                <paramref name="guildId"/>, but the requested player type (
                <typeparamref name="TPlayer"/>) differs from the created one.
            </exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnEventReceived(Lavalink4NET.Payloads.EventPayload)">
            <summary>
                Handles an event payload asynchronously.
            </summary>
            <param name="payload">the payload</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnPayloadReceived(Lavalink4NET.Payloads.IPayload)">
            <summary>
                Processes the payload and invokes the <see cref="E:Lavalink4NET.LavalinkSocket.PayloadReceived"/>
                event asynchronously. (Can be override for event catching)
            </summary>
            <param name="payload">the received payload</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnPlayerPayloadReceived(Lavalink4NET.Payloads.IPlayerPayload)">
            <summary>
                Handles a player payload asynchronously.
            </summary>
            <param name="payload">the payload</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnStatisticsUpdateAsync(Lavalink4NET.Events.StatisticUpdateEventArgs)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkNode.StatisticsUpdated"/> event asynchronously. (Can be override
                for event catching)
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnTrackEndAsync(Lavalink4NET.Events.TrackEndEventArgs)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkNode.TrackEnd"/> event asynchronously. (Can be override for event catching)
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnTrackExceptionAsync(Lavalink4NET.Events.TrackExceptionEventArgs)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkNode.TrackException"/> event asynchronously. (Can be override for
                event catching)
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.OnTrackStuckAsync(Lavalink4NET.Events.TrackStuckEventArgs)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkNode.TrackStuck"/> event asynchronously. (Can be override for event catching)
            </summary>
            <param name="eventArgs">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.VoiceServerUpdated(System.Object,Lavalink4NET.VoiceServer)">
            <summary>
                The asynchronous method which is triggered when a voice server updated was received
                from the discord gateway.
            </summary>
            <param name="sender">the event sender (unused here, but may be override)</param>
            <param name="voiceServer">the voice server update data</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkNode.VoiceStateUpdated(System.Object,Lavalink4NET.Events.VoiceStateUpdateEventArgs)">
            <summary>
                The asynchronous method which is triggered when a voice state updated was received
                from the discord gateway.
            </summary>
            <param name="sender">the event sender (unused here)</param>
            <param name="args">the event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.LavalinkNodeOptions">
            <summary>
                The required options used to connect to a lavalink node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkNodeOptions.WebSocketUri">
            <summary>
                Gets or sets the Lavalink Node WebSocket host(name).
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkNodeOptions.BufferSize">
            <summary>
                Gets or sets the buffer size when receiving payloads from a lavalink node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkNodeOptions.DebugPayloads">
            <summary>
                Gets or sets a value indicating whether payload I/O should be logged to the logger
                (This should be only used for development)
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkNodeOptions.AllowResuming">
            <summary>
                Gets or sets a value indicating whether session resuming should be used when the
                connection to the node is aborted.
            </summary>
        </member>
        <member name="T:Lavalink4NET.LavalinkSocket">
            <summary>
                The socket for connecting to a lavalink node.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.#ctor(Lavalink4NET.LavalinkNodeOptions,Lavalink4NET.IDiscordClientWrapper,Microsoft.Extensions.Logging.ILogger{Lavalink4NET.Lavalink})">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.LavalinkSocket"/> class.
            </summary>
            <param name="options">the node options</param>
            <param name="client">the discord client</param>
            <param name="logger">the logger</param>
        </member>
        <member name="E:Lavalink4NET.LavalinkSocket.PayloadReceived">
            <summary>
                An asynchronous event which is triggered when a payload was received from the
                lavalink node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkSocket.IsConnected">
            <summary>
                Gets a value indicating whether the client is connected to the lavalink node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.LavalinkSocket.Logger">
            <summary>
                Gets the logger.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
                Connects to the lavalink node asynchronously.
            </summary>
            <param name="cancellationToken">
                a cancellation token used to propagate notification that the operation should be canceled.
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the connection is already open
            </exception>
            <exception cref="T:System.OperationCanceledException">thrown if the operation was canceled</exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.Dispose">
            <summary>
                Disposes the inner web socket.
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.InitializeAsync">
            <summary>
                Initializes the node asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.SendPayloadAsync(Lavalink4NET.Payloads.IPayload,System.Boolean)">
            <summary>
                Sends a payload to the lavalink node asynchronously.
            </summary>
            <param name="payload">the payload to sent</param>
            <param name="forceSend">
                a value indicating whether an exception should be thrown if the connection is closed.
                If <see langword="true"/>, an exception is thrown; Otherwise payloads will be stored
                into a send queue and will be replayed (FIFO) after successful reconnection.
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the connection to the node is closed (see: <see cref="P:Lavalink4NET.LavalinkSocket.IsConnected"/>) and
                <paramref name="forceSend"/> is <see langword="true"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the node socket has not been initialized. (Call
                <see cref="M:Lavalink4NET.LavalinkSocket.InitializeAsync"/> before sending payloads)
            </exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.EmulateConnectionLoss">
            <summary>
                TODO
            </summary>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.EnsureInitialized">
            <summary>
                Ensures that the socket is initialized.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                thrown if the node socket has not been initialized. (Call
                <see cref="M:Lavalink4NET.LavalinkSocket.InitializeAsync"/> before sending payloads)
            </exception>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.OnPayloadReceived(Lavalink4NET.Payloads.IPayload)">
            <summary>
                Invokes the <see cref="E:Lavalink4NET.LavalinkSocket.PayloadReceived"/> event asynchronously. (Can be override for
                event catching)
            </summary>
            <param name="payload">the received payload</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.ProcessNextPayload">
            <summary>
                Processes an incoming payload asynchronously.
            </summary>
            <remarks>
                This method should not be called manually. It is called in the connection life cycle,
                see: <see cref="M:Lavalink4NET.LavalinkSocket.RunLifeCycleAsync"/>.
            </remarks>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.LavalinkSocket.RunLifeCycleAsync">
            <summary>
                Runs the receive / reconnect life cycle asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Payloads.ConfigureResumingPayload">
            <summary>
                The strongly-typed representation of a configure resuming payload which sent to the
                lavalink node (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.ConfigureResumingPayload.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.ConfigureResumingPayload"/> class.
            </summary>
            <param name="key">the resuming key</param>
            <param name="timeout">
                the number of seconds after disconnecting before the session is closed anyways
            </param>
        </member>
        <member name="M:Lavalink4NET.Payloads.ConfigureResumingPayload.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.ConfigureResumingPayload"/> class.
            </summary>
            <param name="timeout">
                the number of seconds after disconnecting before the session is closed anyways
            </param>
        </member>
        <member name="P:Lavalink4NET.Payloads.ConfigureResumingPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.ConfigureResumingPayload.Key">
            <summary>
                Gets the resuming key.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.ConfigureResumingPayload.Timeout">
            <summary>
                Gets the number of seconds after disconnecting before the session is closed anyways.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.EventPayload">
            <summary>
                An abstract implementation of lavalink incoming server event payloads.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.EventPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.EventPayload.Type">
            <summary>
                Gets the event type.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.EventPayload.GuildId">
            <summary>
                Gets the id of the affected guild.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.EventType">
            <summary>
                The event types in lavalink event payloads.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.EventType.TrackEnd">
            <summary>
                Indicates that a playing track ended.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.EventType.TrackException">
            <summary>
                Indicates that an exception occurred while playing a track.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.EventType.TrackStuck">
            <summary>
                Indicates that a track got stuck while playing.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.EventType.WebSocketClosedEvent">
            <summary>
                Indicates that the discord voice socket was closed.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.IPayload">
            <summary>
                The base of a lavalink payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.IPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.IPlayerPayload">
            <summary>
                The base for lavalink player payloads.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.IPlayerPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the payload is for.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.OpCode">
            <summary>
                The supported lavalink operation codes for payloads.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.GuildVoiceUpdate">
            <summary>
                Provide an intercepted voice server update. This causes the server to connect to the
                voice channel.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerPlay">
            <summary>
                Cause the player to play a track.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerStop">
            <summary>
                Cause the player to stop.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerPause">
            <summary>
                Set player pause.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerSeek">
            <summary>
                Make the player seek to a position of the track.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerVolume">
            <summary>
                Set player volume.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerEqualizer">
            <summary>
                Using the player equalizer.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerDestroy">
            <summary>
                Tell the server to potentially disconnect from the voice server and potentially
                remove the player with all its data. This is useful if you want to move to a new node
                for a voice connection. Calling this op does not affect voice state, and you can send
                the same VOICE_SERVER_UPDATE to a new node.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.ConfigureResuming">
            <summary>
                Configures resuming for the connection.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.PlayerUpdate">
            <summary>
                Position information about a player.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.NodeStats">
            <summary>
                A collection of stats sent every minute.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Payloads.OpCode.Event">
            <summary>
                An event was emitted.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.PayloadConverter.ReadPayload(System.String)">
            <summary>
                Reads a lavalink payload from the specified json.
            </summary>
            <param name="json">the json to deserialize to a payload</param>
            <returns>the deserialized payload</returns>
        </member>
        <member name="T:Lavalink4NET.Payloads.PlayerDestroyPayload">
            <summary>
                The strongly-typed representation of a player destroy payload sent to the lavalink node
                (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.PlayerDestroyPayload.#ctor(System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.PlayerDestroyPayload"/> class.
            </summary>
            <param name="guildId">
                the guild snowflake identifier where the player should be destroyed
            </param>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerDestroyPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerDestroyPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier where the player should be destroyed.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.PlayerEqualizerPayload">
            <summary>
                The strongly-typed representation of a player equalizer update payload sent to the
                lavalink node (in serialized JSON format). For more reference see the lavalink client
                implementation documentation https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.PlayerEqualizerPayload.#ctor(System.UInt64,Lavalink4NET.Player.EqualizerBand[])">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.PlayerEqualizerPayload"/> class.
            </summary>
            <param name="guildId">
                the guild snowflake identifier the player equalizer update is for
            </param>
            <param name="bands">the equalizer bands</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerEqualizerPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerEqualizerPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player equalizer update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerEqualizerPayload.Bands">
            <summary>
                Gets the equalizer bands.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.PlayerPausePayload">
            <summary>
                The strongly-typed representation of a player pause payload sent to the lavalink node (in
                serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.PlayerPausePayload.#ctor(System.UInt64,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.PlayerPausePayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
            <param name="pause">a value indicating whether the player should be paused</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerPausePayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerPausePayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerPausePayload.Pause">
            <summary>
                Gets a value indicating whether the player should be paused.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.PlayerPlayPayload">
            <summary>
                The strongly-typed representation of a player play payload sent to the lavalink node (in
                serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.PlayerPlayPayload.#ctor(System.UInt64,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.PlayerPlayPayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
            <param name="trackIdentifier">the track identifier that the player should play</param>
            <param name="startTime">the track start position in milliseconds</param>
            <param name="endTime">the track end position in milliseconds</param>
            <param name="noReplace">
                a value indicating whether the track play should be ignored if the same track is
                currently playing
            </param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="trackIdentifier"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerPlayPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerPlayPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerPlayPayload.TrackIdentifier">
            <summary>
                Gets the track identifier that the player should play.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerPlayPayload.StartTime">
            <summary>
                Gets the track start position in milliseconds.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerPlayPayload.EndTime">
            <summary>
                Gets the track end position in milliseconds.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerPlayPayload.NoReplace">
            <summary>
                Gets a value indicating whether the track play should be ignored if the same track is
                currently playing.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.PlayerSeekPayload">
            <summary>
                The strongly-typed representation of a player seek payload sent to the lavalink node (in
                serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.PlayerSeekPayload.#ctor(System.UInt64,System.TimeSpan)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.PlayerSeekPayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
            <param name="position">the seek position</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerSeekPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerSeekPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerSeekPayload.Position">
            <summary>
                Gets a value indicating whether the player should be paused.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.PlayerStopPayload">
            <summary>
                The strongly-typed representation of a player stop payload sent to the lavalink node (in
                serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.PlayerStopPayload.#ctor(System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.PlayerStopPayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerStopPayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerStopPayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.PlayerUpdatePayload">
            <summary>
                The strongly-typed representation of a player update payload received from the lavalink
                node (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerUpdatePayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerUpdatePayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerUpdatePayload.Status">
            <summary>
                Gets the player status.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.PlayerVolumePayload">
            <summary>
                The strongly-typed representation of a player volume payload sent to the lavalink node
                (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.PlayerVolumePayload.#ctor(System.UInt64,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.PlayerVolumePayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
            <param name="volume">the player volume (0 - 1000)</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerVolumePayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerVolumePayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the player update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.PlayerVolumePayload.Volume">
            <summary>
                Gets a value indicating whether the player should be paused.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.StatsUpdatePayload">
            <summary>
                The strongly-typed representation of a node statistics payload received from the lavalink
                node (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.StatsUpdatePayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.StatsUpdatePayload.Players">
            <summary>
                Gets the number of players the node is holding.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.StatsUpdatePayload.PlayingPlayers">
            <summary>
                Gets the number of players that are currently playing using the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.StatsUpdatePayload.Uptime">
            <summary>
                Gets the uptime from the node (how long the node is online).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.StatsUpdatePayload.Memory">
            <summary>
                Gets usage statistics for the memory of the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.StatsUpdatePayload.Processor">
            <summary>
                Gets usage statistics for the processor of the node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.StatsUpdatePayload.FrameStatistics">
            <summary>
                Gets frame statistics of the node.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.TrackEndEvent">
            <summary>
                The strongly-typed representation of a track end event received from the lavalink node
                (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.TrackEndEvent.Type">
            <summary>
                Gets the event type.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.TrackEndEvent.TrackIdentifier">
            <summary>
                Gets the identifier of the track that has ended.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.TrackEndEvent.Reason">
            <summary>
                Gets the reason why the track ended.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.TrackExceptionEvent">
            <summary>
                The strongly-typed representation of a track exception event received from the lavalink
                node (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.TrackExceptionEvent.Type">
            <summary>
                Gets the event type.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.TrackExceptionEvent.TrackIdentifier">
            <summary>
                Gets the identifier of the track where the exception occurred.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.TrackExceptionEvent.Error">
            <summary>
                Gets the error that occurred.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.TrackStuckEvent">
            <summary>
                The strongly-typed representation of a track stuck event received from the lavalink node
                (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.TrackStuckEvent.Type">
            <summary>
                Gets the event type.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.TrackStuckEvent.TrackIdentifier">
            <summary>
                Gets the identifier of the track that got stuck.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.TrackStuckEvent.Threshold">
            <summary>
                Gets the threshold in milliseconds.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.VoiceServerUpdateEvent">
            <summary>
                The update data for the voice server update that is sent to the lavalink server when it
                was received from the discord gateway.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.VoiceServerUpdateEvent.#ctor(System.String,System.UInt64,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.VoiceServerUpdateEvent"/> class.
            </summary>
            <param name="token">the token for the voice connection</param>
            <param name="guildId">the id of the guild the update is for</param>
            <param name="endpoint">the endpoint of the voice server</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="token"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="endpoint"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="M:Lavalink4NET.Payloads.VoiceServerUpdateEvent.#ctor(Lavalink4NET.VoiceServer)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.VoiceServerUpdateEvent"/> class.
            </summary>
            <param name="voiceServer">the voice server</param>
        </member>
        <member name="P:Lavalink4NET.Payloads.VoiceServerUpdateEvent.Token">
            <summary>
                Gets the token for the voice connection.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.VoiceServerUpdateEvent.GuildId">
            <summary>
                Gets the id of the guild the update is for
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.VoiceServerUpdateEvent.Endpoint">
            <summary>
                Gets the endpoint of the voice server.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.VoiceUpdatePayload">
            <summary>
                The representation of a voice update lavalink payload.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Payloads.VoiceUpdatePayload.#ctor(System.UInt64,System.String,Lavalink4NET.Payloads.VoiceServerUpdateEvent)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Payloads.VoiceUpdatePayload"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the voice update is for</param>
            <param name="sessionId">
                the discord voice state session identifier received from the voice state update payload
            </param>
            <param name="voiceServerUpdateEvent">the voice server update event</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="sessionId"/> is <see langword="null"/>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="voiceServerUpdateEvent"/> is <see langword="null"/>
            </exception>
        </member>
        <member name="P:Lavalink4NET.Payloads.VoiceUpdatePayload.OpCode">
            <summary>
                Gets the operation code for the payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.VoiceUpdatePayload.GuildId">
            <summary>
                Gets the guild snowflake identifier the voice update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.VoiceUpdatePayload.SessionId">
            <summary>
                Gets the discord voice state session identifier received from the voice state update payload.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.VoiceUpdatePayload.VoiceServerUpdateEvent">
            <summary>
                Gets the voice server update event.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Payloads.WebSocketClosedEvent">
            <summary>
                The strongly-typed representation of a web socket closed event received from the lavalink
                node (in serialized JSON format). For more reference see https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.WebSocketClosedEvent.Type">
            <summary>
                Gets the event type.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.WebSocketClosedEvent.CloseCode">
            <summary>
                Gets the web-socket close code.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.WebSocketClosedEvent.Reason">
            <summary>
                Gets the reason why the web-socket was closed.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Payloads.WebSocketClosedEvent.ByRemote">
            <summary>
                Gets a value indicating whether the connection was closed by the remote (discord gateway).
            </summary>
        </member>
        <member name="T:Lavalink4NET.PlayerStatus">
            <summary>
                A wrapper for the player status object.
            </summary>
        </member>
        <member name="M:Lavalink4NET.PlayerStatus.#ctor(System.Int64,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.PlayerStatus"/> class.
            </summary>
            <param name="time">the time when the update was sent</param>
            <param name="position">the track position in milliseconds</param>
        </member>
        <member name="P:Lavalink4NET.PlayerStatus.UpdateTime">
            <summary>
                Gets the time when the position update was sent.
            </summary>
        </member>
        <member name="P:Lavalink4NET.PlayerStatus.Position">
            <summary>
                Gets the track position (at the time the update was received, see: <see cref="P:Lavalink4NET.PlayerStatus.UpdateTime"/>).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.EqualizerBand">
            <summary>
                Represents a lavalink equalizer band.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.EqualizerBand.#ctor(System.Int32,System.Single)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.EqualizerBand"/> class.
            </summary>
            <param name="band">the equalizer band number (0-14)</param>
            <param name="gain">the band gain ( <c>-0.25f</c> - <c>1f</c>)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="band"/> is less than <c>1f</c> or greater
                than <c>14</c>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="gain"/> is less than <c>-0.25f</c> or greater
                than <c>1f</c>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.Player.EqualizerBand.Band">
            <summary>
                Gets the equalizer band number (0-14).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.EqualizerBand.Gain">
            <summary>
                Gets the band gain (-0.25f - 1f).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.EqualizerBandComparer.Instance">
            <summary>
                Gets the shared instance of the <see cref="T:Lavalink4NET.Player.EqualizerBandComparer"/> class.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.EqualizerBandComparer.Equals(Lavalink4NET.Player.EqualizerBand,Lavalink4NET.Player.EqualizerBand)">
            <summary>
                Checks the equality of the first <paramref name="band1"/> and the second
                <paramref name="band2"/> by comparing it's gain value.
            </summary>
            <param name="band1">the first equalizer band</param>
            <param name="band2">the second equalizer band</param>
            <returns>a value indicating whether the first band is equal to the second</returns>
        </member>
        <member name="M:Lavalink4NET.Player.EqualizerBandComparer.GetHashCode(Lavalink4NET.Player.EqualizerBand)">
            <summary>
                Gets the hash-code of the specified <paramref name="band"/> without the gain included.
            </summary>
            <param name="band">the equalizer band</param>
            <returns>the hash code</returns>
        </member>
        <member name="T:Lavalink4NET.Player.LavalinkPlayer">
            <summary>
                Controls a remote Lavalink Audio Player.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.#ctor(Lavalink4NET.LavalinkSocket,Lavalink4NET.IDiscordClientWrapper,System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.LavalinkPlayer"/> class.
            </summary>
            <param name="lavalinkSocket">the lavalink socket</param>
            <param name="client">the discord client</param>
            <param name="guildId">the identifier of the guild that is controlled by the player</param>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.DefaultEqualizer">
            <summary>
                Gets the default equalizer bands. (All 15 [0-14] equalizer bands set to zero gain)
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.Client">
            <summary>
                Gets the discord client wrapper.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.CurrentTrack">
            <summary>
                Gets the track that is currently playing.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.GuildId">
            <summary>
                Gets the identifier snowflake value of the guild the player is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.State">
            <summary>
                Gets the current player state.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.TrackPosition">
            <summary>
                Gets the current track position.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkPlayer.VoiceChannelId">
            <summary>
                Gets the voice channel id the player is connected to.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.ConnectAsync(System.UInt64,System.Boolean,System.Boolean)">
            <summary>
                Joins the voice channel specified by <paramref name="voiceChannelId"/> asynchronously.
            </summary>
            <param name="voiceChannelId">the voice channel identifier to join</param>
            <param name="selfDeaf">a value indicating whether the bot user should be self deafened</param>
            <param name="selfMute">a value indicating whether the bot user should be self muted</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.DisconnectAsync">
            <summary>
                Disconnects the player asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.Dispose">
            <summary>
                Destroys the player asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.PauseAsync">
            <summary>
                Pauses the current playing track asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the current playing track is already paused.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.PlayAsync(Lavalink4NET.Player.LavalinkTrack)">
            <summary>
                Plays the specified <paramref name="track"/> asynchronously.
            </summary>
            <param name="track">the track to play</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.ResumeAsync">
            <summary>
                Resumes the current playing track asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.InvalidOperationException">
                thrown if the current playing track is not paused
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.SeekPositionAsync(System.TimeSpan)">
            <summary>
                Seeks the current playing track asynchronously.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.NotSupportedException">
                thrown if the current playing track does not support seeking.
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.SetVolumeAsync(System.Single)">
            <summary>
                Updates the player volume asynchronously.
            </summary>
            <param name="volume">the player volume (0f - 10f)</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                thrown if the specified <paramref name="volume"/> is out of range (0f - 10f)
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.StopAsync(System.Boolean)">
            <summary>
                Stops playing the current track asynchronously.
            </summary>
            <param name="disconnect">
                a value indicating whether the connection to the voice server should be closed
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.UpdateEqualizerAsync(System.Collections.Generic.IEnumerable{Lavalink4NET.Player.EqualizerBand},System.Boolean)">
            <summary>
                Updates the player equalizer asynchronously.
            </summary>
            <param name="bands">the bands</param>
            <param name="reset">
                a value indicating whether the equalizer bands should be overridden (
                <see langword="false"/>) or replaced ( <see langword="true"/>).
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.UpdateAsync(Lavalink4NET.VoiceServer)">
            <summary>
                Updates the voice server and sends the data to the Lavalink Node if the voice state
                is also provided.
            </summary>
            <param name="voiceServer">the voice server data</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.UpdateAsync(Lavalink4NET.VoiceState)">
            <summary>
                Updates the voice state and sends the data to the Lavalink Node if the voice server
                is also provided.
            </summary>
            <param name="voiceState">the voice state data</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.OnTrackEndAsync(Lavalink4NET.Events.TrackEndEventArgs)">
            <summary>
                Asynchronously triggered when a track ends.
            </summary>
            <param name="eventArgs">the track event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.OnTrackExceptionAsync(Lavalink4NET.Events.TrackExceptionEventArgs)">
            <summary>
                Asynchronously triggered when an exception occurred while playing a track.
            </summary>
            <param name="eventArgs">the track event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.OnTrackStuckAsync(Lavalink4NET.Events.TrackStuckEventArgs)">
            <summary>
                Asynchronously triggered when a track got stuck.
            </summary>
            <param name="eventArgs">the track event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.EnsureConnected">
            <summary>
                Throws an <see cref="T:System.InvalidOperationException"/> when the player is not connected to
                a voice channel.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                thrown if the player is not connected to a voice channel
            </exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.EnsureNotDestroyed">
            <summary>
                Throws an <see cref="T:System.InvalidOperationException"/> when the player is destroyed.
            </summary>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.LavalinkPlayer.UpdateAsync">
            <summary>
                Sends the voice state and server data to the Lavalink Node if both is provided.
            </summary>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="T:Lavalink4NET.Player.LavalinkTrack">
            <summary>
                The information of a lavalink track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Author">
            <summary>
                Gets the name of the track author.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Duration">
            <summary>
                Gets the duration of the track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Identifier">
            <summary>
                Gets a unique track identifier.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.IsLiveStream">
            <summary>
                Gets a value indicating whether the track is a live stream.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.IsSeekable">
            <summary>
                Gets a value indicating whether the track is seek-able.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Source">
            <summary>
                Gets the track source.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.Title">
            <summary>
                Gets the title of the track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrack.TrackIdentifier">
            <summary>
                Gets the unique track identifier (Example: dQw4w9WgXcQ, YouTube Video ID).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.LavalinkTrackInfo">
            <summary>
                The information store for a lavalink track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.Author">
            <summary>
                Gets the name of the track author.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.Title">
            <summary>
                Gets the title of the track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.Source">
            <summary>
                Gets the track source.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.Duration">
            <summary>
                Gets the duration of the track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.IsLiveStream">
            <summary>
                Gets a value indicating whether the track is a live stream.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.IsSeekable">
            <summary>
                Gets a value indicating whether the track is seek-able.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.LavalinkTrackInfo.TrackIdentifier">
            <summary>
                Gets the unique track identifier (Example: dQw4w9WgXcQ, YouTube Video ID).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.PlayerState">
            <summary>
                Represents different player states.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.PlayerState.Playing">
            <summary>
                The player is playing a track.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.PlayerState.NotPlaying">
            <summary>
                The player is in idle state and is not playing any track.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.PlayerState.Destroyed">
            <summary>
                The connection to the voice server is closed and the player should not be used anymore.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.PlayerState.Paused">
            <summary>
                The current track is paused and can be resumed.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.PlayerState.NotConnected">
            <summary>
                The player is not connected to a voice channel.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.QueuedLavalinkPlayer">
            <summary>
                A lavalink player with a queuing system.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.#ctor(Lavalink4NET.LavalinkSocket,Lavalink4NET.IDiscordClientWrapper,System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.QueuedLavalinkPlayer"/> class.
            </summary>
            <param name="lavalinkSocket">the lavalink socket</param>
            <param name="client">the discord client</param>
            <param name="guildId">the identifier of the guild that is controlled by the player</param>
        </member>
        <member name="P:Lavalink4NET.Player.QueuedLavalinkPlayer.IsLooping">
            <summary>
                Gets or sets a value indicating whether the current playing track should be looped.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.PlayAsync(Lavalink4NET.Player.LavalinkTrack)">
            <summary>
                Plays the specified <paramref name="track"/> asynchronously.
            </summary>
            <param name="track">the track to play</param>
            <returns>
                a task that represents the asynchronous operation
                <para>the position in the track queue ( <c>0</c> = now playing)</para>
            </returns>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.PlayAsync(Lavalink4NET.Player.LavalinkTrack,System.Boolean)">
            <summary>
                Plays the specified <paramref name="track"/> asynchronously.
            </summary>
            <param name="track">the track to play</param>
            <param name="enqueue">
                a value indicating whether the track should be enqueued in the track queue
            </param>
            <returns>
                a task that represents the asynchronous operation
                <para>the position in the track queue ( <c>0</c> = now playing)</para>
            </returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.OnTrackEndAsync(Lavalink4NET.Events.TrackEndEventArgs)">
            <summary>
                Asynchronously triggered when a track ends.
            </summary>
            <param name="eventArgs">the track event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.StopAsync(System.Boolean)">
            <summary>
                Stops playing the current track asynchronously.
            </summary>
            <param name="disconnect">
                a value indicating whether the connection to the voice server should be closed
            </param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="P:Lavalink4NET.Player.QueuedLavalinkPlayer.QueuedTracks">
            <summary>
                Gets the tracks in queue.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.QueuedLavalinkPlayer.SkipAsync(System.Int32)">
            <summary>
                Skips the current track asynchronously.
            </summary>
            <param name="count">the number of tracks to skip</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="T:Lavalink4NET.Player.TrackEndReason">
            <summary>
                The different reason for a track ending.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.TrackEndReason.Finished">
            <summary>
                The track finished.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.TrackEndReason.LoadFailed">
            <summary>
                The load of the track failed.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.TrackEndReason.Stopped">
            <summary>
                The track was stopped.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.TrackEndReason.Replaced">
            <summary>
                The track was replaced by another.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Player.TrackEndReason.CleanUp">
            <summary>
                The player was destroyed.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.UserVoteSkipInfo">
            <summary>
                Contains information about the current vote information and the submitted user vote.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.UserVoteSkipInfo.#ctor(Lavalink4NET.Player.VoteSkipInfo,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.UserVoteSkipInfo"/> class.
            </summary>
            <param name="info">the <see cref="T:Lavalink4NET.Player.VoteSkipInfo"/> to clone</param>
            <param name="wasSkipped">
                a value indicating whether the user vote submit caused that the current playing track
                was skipped
            </param>
            <param name="wasAdded">
                a value indicating whether the user vote submit was added to the vote list
            </param>
        </member>
        <member name="M:Lavalink4NET.Player.UserVoteSkipInfo.#ctor(System.Collections.Generic.IReadOnlyCollection{System.UInt64},System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.UserVoteSkipInfo"/> class.
            </summary>
            <param name="votes">
                a collection of the snowflake identifier values of the users that voted for skipping
                the current track
            </param>
            <param name="totalUsers">
                the total number of users in the voice channel (the bot is excluded)
            </param>
            <param name="wasSkipped">
                a value indicating whether the user vote submit caused that the current playing track
                was skipped
            </param>
            <param name="wasAdded">
                a value indicating whether the user vote submit was added to the vote list
            </param>
        </member>
        <member name="P:Lavalink4NET.Player.UserVoteSkipInfo.WasSkipped">
            <summary>
                Gets a value indicating whether the user vote submit caused that the current playing
                track was skipped.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.UserVoteSkipInfo.WasAdded">
            <summary>
                Gets a value indicating whether the user vote submit was added to the vote list.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Player.VoteLavalinkPlayer">
            <summary>
                A lavalink player with a queuing and voting system.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.VoteLavalinkPlayer.OnTrackEndAsync(Lavalink4NET.Events.TrackEndEventArgs)">
            <summary>
                Asynchronously triggered when a track ends.
            </summary>
            <param name="eventArgs">the track event arguments</param>
            <returns>a task that represents the asynchronous operation</returns>
        </member>
        <member name="M:Lavalink4NET.Player.VoteLavalinkPlayer.#ctor(Lavalink4NET.LavalinkSocket,Lavalink4NET.IDiscordClientWrapper,System.UInt64)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.VoteLavalinkPlayer"/> class.
            </summary>
            <param name="lavalinkSocket">the lavalink socket</param>
            <param name="client">the discord client</param>
            <param name="guildId">the identifier of the guild that is controlled by the player</param>
        </member>
        <member name="M:Lavalink4NET.Player.VoteLavalinkPlayer.GetVoteInfoAsync">
            <summary>
                Gets the player skip vote info.
            </summary>
            <returns>the vote info</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="M:Lavalink4NET.Player.VoteLavalinkPlayer.ClearVotes">
            <summary>
                Clears all user votes.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.VoteLavalinkPlayer.VoteAsync(System.UInt64,System.Single)">
            <summary>
                Submits an user vote asynchronously.
            </summary>
            <param name="userId">the user snowflake identifier</param>
            <param name="percentage">the minimum voting percentage to skip the track</param>
            <returns>a task that represents the asynchronous operation</returns>
            <exception cref="T:System.InvalidOperationException">thrown if the player is destroyed</exception>
        </member>
        <member name="T:Lavalink4NET.Player.VoteSkipInfo">
            <summary>
                Contains information about the current vote information of the player.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Player.VoteSkipInfo.#ctor(System.Collections.Generic.IReadOnlyCollection{System.UInt64},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Player.VoteSkipInfo"/> class.
            </summary>
            <param name="votes">
                a collection of the snowflake identifier values of the users that voted for skipping
                the current track
            </param>
            <param name="totalUsers">
                the total number of users in the voice channel (the bot is excluded)
            </param>
        </member>
        <member name="P:Lavalink4NET.Player.VoteSkipInfo.Percentage">
            <summary>
                Gets the vote percentage in range of 0 - 1f.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.VoteSkipInfo.Votes">
            <summary>
                Gets a collection of the snowflake identifier values of the users that voted for
                skipping the current track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Player.VoteSkipInfo.TotalUsers">
            <summary>
                Gets the total number of users in the voice channel (the bot is excluded).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Rest.ILavalinkRestClient">
            <summary>
                An interface for a lavalink rest client, that can load tracks from a node.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Rest.ILavalinkRestClient.GetTrackAsync(System.String,Lavalink4NET.Rest.SearchMode)">
            <summary>
                Gets the track for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <returns>the track found for the query</returns>
        </member>
        <member name="M:Lavalink4NET.Rest.ILavalinkRestClient.GetTracksAsync(System.String,Lavalink4NET.Rest.SearchMode)">
            <summary>
                Gets the tracks for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <returns>the tracks found for the query</returns>
        </member>
        <member name="M:Lavalink4NET.Rest.ILavalinkRestClient.LoadTracksAsync(System.String,Lavalink4NET.Rest.SearchMode)">
            <summary>
                Loads the tracks specified by the <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the search query</param>
            <param name="mode">the track search mode</param>
            <returns>
                a task that represents the asynchronous operation <param>the request response</param>
            </returns>
        </member>
        <member name="T:Lavalink4NET.Rest.LavalinkRestClient">
            <summary>
                Lavalink RESTful HTTP api client.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.LavalinkRestClient.VersionHeaderName">
            <summary>
                The header name for the version of the Lavalink HTTP response from the node. See
                https://github.com/Frederikam/Lavalink/blob/master/IMPLEMENTATION.md#significant-changes-v20---v30
                for more details.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.#ctor(Lavalink4NET.Rest.LavalinkRestOptions,Microsoft.Extensions.Logging.ILogger{Lavalink4NET.Lavalink})">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.Rest.LavalinkRestClient"/> class.
            </summary>
            <param name="options">the rest client options</param>
            <param name="logger">the logger</param>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.Dispose">
            <summary>
                Disposes the inner HTTP client.
            </summary>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.GetTrackAsync(System.String,Lavalink4NET.Rest.SearchMode)">
            <summary>
                Gets the track for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <returns>the track found for the query</returns>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.GetTracksAsync(System.String,Lavalink4NET.Rest.SearchMode)">
            <summary>
                Gets the tracks for the specified <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the track search query</param>
            <param name="mode">the track search mode</param>
            <returns>the tracks found for the query</returns>
        </member>
        <member name="M:Lavalink4NET.Rest.LavalinkRestClient.LoadTracksAsync(System.String,Lavalink4NET.Rest.SearchMode)">
            <summary>
                Loads the tracks specified by the <paramref name="query"/> asynchronously.
            </summary>
            <param name="query">the search query</param>
            <param name="mode">the track search mode</param>
            <returns>
                a task that represents the asynchronous operation <param>the request response</param>
            </returns>
        </member>
        <member name="T:Lavalink4NET.Rest.LavalinkRestOptions">
            <summary>
                The options for a lavalink rest client ( <see cref="T:Lavalink4NET.Rest.ILavalinkRestClient"/>).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.LavalinkRestOptions.RestUri">
            <summary>
                Gets or sets the Lavalink Node restful HTTP api URI.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.LavalinkRestOptions.Password">
            <summary>
                Gets or sets the Lavalink Node Password.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Rest.PlaylistInfo">
            <summary>
                The playlist info object for the track load response.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.PlaylistInfo.SelectedTrack">
            <summary>
                Gets the index of the selected track.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.PlaylistInfo.Name">
            <summary>
                Gets the name of the playlist.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Rest.SearchMode">
            <summary>
                Different search modes for the "/tracks" endpoint.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.SearchMode.None">
            <summary>
                Accepts raw queries.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.SearchMode.YouTube">
            <summary>
                Only searches for links and YouTube videos.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.SearchMode.SoundCloud">
            <summary>
                Only searches for links and SoundCloud tracks.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Rest.TrackLoadResponsePayload">
            <summary>
                The RESTful api HTTP response object for request to the "/tracks" endpoint.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.TrackLoadResponsePayload.LoadType">
            <summary>
                Gets the type of what was loaded.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.TrackLoadResponsePayload.PlaylistInfo">
            <summary>
                Gets the information about the playlist.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Rest.TrackLoadResponsePayload.Tracks">
            <summary>
                Gets the loaded tracks.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Rest.TrackLoadType">
            <summary>
                The possible track load types.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.TrackLoadType.TrackLoaded">
            <summary>
                A single track was loaded.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.TrackLoadType.PlaylistLoaded">
            <summary>
                A playlist was loaded.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.TrackLoadType.SearchResult">
            <summary>
                A search result was made.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.TrackLoadType.NoMatches">
            <summary>
                No matches were found for the given identifier.
            </summary>
        </member>
        <member name="F:Lavalink4NET.Rest.TrackLoadType.LoadFailed">
            <summary>
                Something happened while loading the track(s).
            </summary>
        </member>
        <member name="T:Lavalink4NET.Statistics.FrameStatistics">
            <summary>
                The frame statistics of a lavalink node.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.FrameStatistics.AverageFramesSent">
            <summary>
                Gets the number of average frames sent per minute.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.FrameStatistics.AverageNulledFrames">
            <summary>
                Gets the number of average nulled frames per minute.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.FrameStatistics.AverageDeficitFrames">
            <summary>
                Gets the number of average deficit frames per minute.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Statistics.MemoryStatistics">
            <summary>
                A wrapper for the statistics.memory object in the statistics update from the lavalink server.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.MemoryStatistics.FreeMemory">
            <summary>
                The free RAM memory in bytes.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.MemoryStatistics.UsedMemory">
            <summary>
                The used RAM memory in bytes.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.MemoryStatistics.AllocatedMemory">
            <summary>
                The allocated RAM memory in bytes.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.MemoryStatistics.ReservableMemory">
            <summary>
                The reservable RAM memory in bytes.
            </summary>
        </member>
        <member name="T:Lavalink4NET.Statistics.ProcessorStatistics">
            <summary>
                A wrapper for the statistics.processor object in the statistics update from the lavalink server.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.ProcessorStatistics.Cores">
            <summary>
                The number of cores the system has.
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.ProcessorStatistics.SystemLoad">
            <summary>
                The system load (percentage).
            </summary>
        </member>
        <member name="P:Lavalink4NET.Statistics.ProcessorStatistics.NodeLoad">
            <summary>
                The node load (percentage).
            </summary>
        </member>
        <member name="T:Lavalink4NET.VoiceServer">
            <summary>
                Represents the information for a discord voice server.
            </summary>
        </member>
        <member name="M:Lavalink4NET.VoiceServer.#ctor(System.UInt64,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.VoiceServer"/> class.
            </summary>
            <param name="guildId">the guild snowflake identifier the update is for</param>
            <param name="token">
                the voice server token that is required for connecting to the voice endpoint
            </param>
            <param name="endpoint">the address of the voice server to connect to</param>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="token"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                thrown if the specified <paramref name="endpoint"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Lavalink4NET.VoiceServer.GuildId">
            <summary>
                Gets the guild snowflake identifier the update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.VoiceServer.Token">
            <summary>
                Gets the voice server token that is required for connecting to the voice endpoint.
            </summary>
        </member>
        <member name="P:Lavalink4NET.VoiceServer.Endpoint">
            <summary>
                Gets the address of the voice server to connect to.
            </summary>
        </member>
        <member name="T:Lavalink4NET.VoiceState">
            <summary>
                Represents the information for a discord user voice state.
            </summary>
        </member>
        <member name="M:Lavalink4NET.VoiceState.#ctor(System.Nullable{System.UInt64},System.UInt64,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Lavalink4NET.VoiceState"/> class.
            </summary>
            <param name="voiceChannelId">the voice channel identifier</param>
            <param name="guildId">
                the guild snowflake identifier the voice state update is for
            </param>
            <param name="voiceSessionId">the voice session identifier</param>
        </member>
        <member name="P:Lavalink4NET.VoiceState.VoiceChannelId">
            <summary>
                Gets the voice channel identifier.
            </summary>
        </member>
        <member name="P:Lavalink4NET.VoiceState.GuildId">
            <summary>
                Gets the guild snowflake identifier the voice state update is for.
            </summary>
        </member>
        <member name="P:Lavalink4NET.VoiceState.VoiceSessionId">
            <summary>
                Gets the voice session identifier.
            </summary>
        </member>
    </members>
</doc>
